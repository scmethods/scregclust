[{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://scmethods.github.io/scregclust/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://scmethods.github.io/scregclust/articles/pbmc.html","id":"download-the-data","dir":"Articles","previous_headings":"","what":"Download the data","title":"Demonstration of workflow","text":"focusing filtered feature barcode matrix available HDF5 file website linked . data can downloaded manually using R. However obtain data, code assumes HDF5 file containing placed folder script name pbmc_granulocyte_sorted_3k_filtered_feature_bc_matrix.h5.","code":"url <- paste0(   \"https://cf.10xgenomics.com/samples/cell-arc/2.0.0/\",   \"pbmc_granulocyte_sorted_3k/\",   \"pbmc_granulocyte_sorted_3k_filtered_feature_bc_matrix.h5\" ) data_path <- file.path(   tempdir(), \"pbmc_granulocyte_sorted_3k_filtered_feature_bc_matrix.h5\" )  download.file(url, data_path, cacheOK = FALSE, mode = \"wb\")"},{"path":"https://scmethods.github.io/scregclust/articles/pbmc.html","id":"load-the-data-in-seurat-and-preprocess","dir":"Articles","previous_headings":"","what":"Load the data in Seurat and preprocess","title":"Demonstration of workflow","text":"perform preprocessing use Seurat load data. file ships two modalities, “Gene Expression” “Peaks”. use former. create Seurat object follow Seurat vignette subset cells features (genes). SCTransform used variance stabilization data Pearson residuals 6000 variable genes extracted matrix z.","code":"pbmc_data <- Read10X_h5(   data_path,   use.names = TRUE,   unique.features = TRUE )[[\"Gene Expression\"]] #> Genome matrix has multiple modalities, returning a list of matrices for this genome pbmc <- CreateSeuratObject(   counts = pbmc_data, min.cells = 3, min.features = 200 )  pbmc[[\"percent.mt\"]] <- PercentageFeatureSet(pbmc, pattern = \"^MT.\") pbmc <- subset(pbmc, subset = percent.mt < 30 & nFeature_RNA < 6000) pbmc <- SCTransform(pbmc, variable.features.n = 6000) #> Running SCTransform on assay: RNA #> vst.flavor='v2' set. Using model with fixed slope and excluding poisson genes. #> Calculating cell attributes from input UMI matrix: log_umi #> Variance stabilizing transformation of count matrix of size 19168 by 2686 #> Model formula is y ~ log_umi #> Get Negative Binomial regression parameters per gene #> Using 2000 genes, 2686 cells #> Found 6 outliers - those will be ignored in fitting/regularization step #> Second step: Get residuals using fitted parameters for 19168 genes #> Computing corrected count matrix for 19168 genes #> Calculating gene attributes #> Wall clock passed: Time difference of 13.60718 secs #> Determine variable features #> Centering data matrix #> Place corrected count matrix in counts slot #> Set default assay to SCT  z <- GetAssayData(pbmc, layer = \"scale.data\") dim(z) #> [1] 6000 2686"},{"path":"https://scmethods.github.io/scregclust/articles/pbmc.html","id":"use-scregclust-for-clustering-target-genes-into-modules","dir":"Articles","previous_headings":"","what":"Use scregclust for clustering target genes into modules","title":"Demonstration of workflow","text":"use scregclust_format extracts gene symbols expression matrix determines genes considered regulators. default, transcription factors used regulators. Setting mode \"kinase\" uses kinases instead transcription factors. list regulators used internally returned get_regulator_list(). output scregclust_format list three elements. genesymbols contains rownames z sample_assignment initialized vector 1s length ncol(z) can filled known sample grouping. , use just keep uniform across cells. is_regulator indicator vector (elements 0 1) corresponding entries genesymbols 1 marking genesymbol selected regulator according model scregclust_format (\"TF\" \"kinase\") 0 otherwise. Run scregclust number initial modules set 10 test several penalties. penalties provided penalization used selection regulators associated module. increasing penalty implies selection fewer regulators. noise_threshold controls minimum R2R^2 gene achieve across modules. Otherwise gene marked noise. run can reproduced command . pre-fitted model can downloaded GitHub convenience.","code":"out <- scregclust_format(z, mode = \"TF\") genesymbols <- out$genesymbols sample_assignment <- out$sample_assignment is_regulator <- out$is_regulator # set.seed(8374) # fit <- scregclust( #   z, genesymbols, is_regulator, penalization = seq(0.1, 0.5, 0.05), #   n_modules = 10L, n_cycles = 50L, noise_threshold = 0.05 # ) # saveRDS(fit, file = \"datasets/pbmc_scregclust.rds\")  url <- paste0(   \"https://github.com/scmethods/scregclust/raw/main/datasets/\",   \"pbmc_scregclust.rds\" ) fit_path <- file.path(tempdir(), \"pbmc_scregclust.rds\") download.file(url, fit_path) fit <- readRDS(fit_path)"},{"path":"https://scmethods.github.io/scregclust/articles/pbmc.html","id":"analysis-of-results","dir":"Articles","previous_headings":"","what":"Analysis of results","title":"Demonstration of workflow","text":"Results can visualized easily using built-functions. Metrics helping choosing optimal penalty can plotted calling plot object returned scregclust.  results penalization parameter placed list, results, attached fit object. fit$results[[1]] contains results running scregclust penalization = 0.1. penalization parameter, algorithm might end finding multiple optimal configurations. configuration describes target genes module assignments regulators associated modules. results configuration contained list output. means fit$results[[1]]$output[[1]] contains results first final configuration. one may available. example, two final configurations found penalization parameters. plot regulator network first configuration penalization = 0.1 function plot_regulator_network can used.","code":"plot(fit) sapply(fit$results, function(r) length(r$output)) #> [1] 2 1 1 1 2 2 2 1 1 plot_regulator_network(fit$results[[1]]$output[[1]])"},{"path":"https://scmethods.github.io/scregclust/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Felix Held. Author, maintainer. Ida Larsson. Author. Sven Nelander. Author. André Armatowski. Contributor.","code":""},{"path":"https://scmethods.github.io/scregclust/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Larsson , Held F, Popova G, Koc , Kundu S, Jörnsten R, Nelander S (2024). “Reconstructing regulatory programs underlying phenotypic plasticity neural cancers.” Nature Communications, 15(9699). doi:10.1038/s41467-024-53954-3.","code":"@Article{,   title = {Reconstructing the regulatory programs underlying the phenotypic plasticity of neural cancers},   author = {Ida Larsson and Felix Held and Gergana Popova and Alper Koc and Soumi Kundu and Rebecka Jörnsten and Sven Nelander},   journal = {Nature Communications},   year = {2024},   volume = {15},   number = {9699},   doi = {10.1038/s41467-024-53954-3}, }"},{"path":[]},{"path":"https://scmethods.github.io/scregclust/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Reconstructing the Regulatory Programs of Target Genes in scRNA-Seq Data","text":"goal scregclust cluster genes regulatory programs. , genes clustered modules turn associated regulators. algorithm alternates associating regulators modules reallocating target genes modules. detailed description algorithm -depth evaluation properties can found original research article Larsson, Held, et al. (2024) Reconstructing regulatory programs underlying phenotypic plasticity neural cancers. Nature Communications 15, 9699 DOI 10.1038/s41467-024-53954-3","code":""},{"path":"https://scmethods.github.io/scregclust/reference/alloc_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Allocate 3d-array and fill with matrix along first dimension — alloc_array","title":"Allocate 3d-array and fill with matrix along first dimension — alloc_array","text":"Allocate 3d-array fill matrix along first dimension","code":""},{"path":"https://scmethods.github.io/scregclust/reference/alloc_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allocate 3d-array and fill with matrix along first dimension — alloc_array","text":"","code":"alloc_array(input, n_cl)"},{"path":"https://scmethods.github.io/scregclust/reference/alloc_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allocate 3d-array and fill with matrix along first dimension — alloc_array","text":"input matrix size n_obs x n_genes n_cl size three-dimensional array's first dimension","code":""},{"path":"https://scmethods.github.io/scregclust/reference/alloc_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allocate 3d-array and fill with matrix along first dimension — alloc_array","text":"allocated filled array size n_cl x n_obs x n_genes","code":""},{"path":"https://scmethods.github.io/scregclust/reference/available_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract final configurations into a data frame — available_results","title":"Extract final configurations into a data frame — available_results","text":"Extract final configurations data frame","code":""},{"path":"https://scmethods.github.io/scregclust/reference/available_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract final configurations into a data frame — available_results","text":"","code":"available_results(obj)"},{"path":"https://scmethods.github.io/scregclust/reference/available_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract final configurations into a data frame — available_results","text":"obj object class scregclust","code":""},{"path":"https://scmethods.github.io/scregclust/reference/available_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract final configurations into a data frame — available_results","text":"data.frame containing penalization parameters final configurations penalizations.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/cluster_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table of module overlap for two clusterings — cluster_overlap","title":"Create a table of module overlap for two clusterings — cluster_overlap","text":"Compares two clusterings creates table overlap . Module labels match.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/cluster_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table of module overlap for two clusterings — cluster_overlap","text":"","code":"cluster_overlap(k1, k2)"},{"path":"https://scmethods.github.io/scregclust/reference/cluster_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table of module overlap for two clusterings — cluster_overlap","text":"k1 First clustering k2 Second clustering","code":""},{"path":"https://scmethods.github.io/scregclust/reference/cluster_overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table of module overlap for two clusterings — cluster_overlap","text":"matrix showing module overlap labels k1 columns labels k2 rows.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/coef_nnls.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute NNLS coefficients — coef_nnls","title":"Compute NNLS coefficients — coef_nnls","text":"Computes non-negative least squares coefficients matrix right hand side.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/coef_nnls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute NNLS coefficients — coef_nnls","text":"","code":"coef_nnls(x, y, eps = 1e-12, max_iter = 1000L)"},{"path":"https://scmethods.github.io/scregclust/reference/coef_nnls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute NNLS coefficients — coef_nnls","text":"x Coefficient matrix (p x n matrix) y Right hand side (p x m matrix) eps Convergence tolerance max_iter Maximum number iterations","code":""},{"path":"https://scmethods.github.io/scregclust/reference/coef_nnls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute NNLS coefficients — coef_nnls","text":"list containing beta estimated coefficient matrix iterations vector containing number iterations needed -th column y -th entry.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/coef_nnls.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute NNLS coefficients — coef_nnls","text":"Duy Khuong Nguyen Tu Bao Ho. Accelerated anti-lopsided algorithm nonnegative least squares. International Journal Data Science Analytics, 3(1):23–34, 2017. Adapted https://github.com/khuongnd/nnls_antilopsided","code":""},{"path":"https://scmethods.github.io/scregclust/reference/coef_ols.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute OLS coefficients — coef_ols","title":"Compute OLS coefficients — coef_ols","text":"design matrix full column-rank, use normal least squares estimate. Otherwise, use Moore-Penrose inverse compute least squares estimate.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/coef_ols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute OLS coefficients — coef_ols","text":"","code":"coef_ols(y, x)"},{"path":"https://scmethods.github.io/scregclust/reference/coef_ols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute OLS coefficients — coef_ols","text":"y Target vector (n x 1)/matrix (n x m) x Design matrix (n x p)","code":""},{"path":"https://scmethods.github.io/scregclust/reference/coef_ols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute OLS coefficients — coef_ols","text":"Vector OLS coefficients","code":""},{"path":"https://scmethods.github.io/scregclust/reference/coef_ridge.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute ridge regression coefficients — coef_ridge","title":"Compute ridge regression coefficients — coef_ridge","text":"Compute ridge regression coefficients","code":""},{"path":"https://scmethods.github.io/scregclust/reference/coef_ridge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute ridge regression coefficients — coef_ridge","text":"","code":"coef_ridge(y, x, lambda)"},{"path":"https://scmethods.github.io/scregclust/reference/coef_ridge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute ridge regression coefficients — coef_ridge","text":"y Target vector (n x 1)/matrix (n x m) x Design matrix (n x p) lambda Positive parameter ridge penalty","code":""},{"path":"https://scmethods.github.io/scregclust/reference/coef_ridge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute ridge regression coefficients — coef_ridge","text":"Vector ridge regression coefficients","code":""},{"path":"https://scmethods.github.io/scregclust/reference/compute_adjusted_rand_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Hubert's and Arabie's Adjusted Rand index — compute_adjusted_rand_index","title":"Compute Hubert's and Arabie's Adjusted Rand index — compute_adjusted_rand_index","text":"Compute Hubert's Arabie's Adjusted Rand index","code":""},{"path":"https://scmethods.github.io/scregclust/reference/compute_adjusted_rand_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Hubert's and Arabie's Adjusted Rand index — compute_adjusted_rand_index","text":"","code":"compute_adjusted_rand_index(k1, k2)"},{"path":"https://scmethods.github.io/scregclust/reference/compute_adjusted_rand_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Hubert's and Arabie's Adjusted Rand index — compute_adjusted_rand_index","text":"k1 First clustering vector integers k2 Second clustering vector integers","code":""},{"path":"https://scmethods.github.io/scregclust/reference/compute_adjusted_rand_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Hubert's and Arabie's Adjusted Rand index — compute_adjusted_rand_index","text":"Adjusted Rand index numeric value","code":""},{"path":"https://scmethods.github.io/scregclust/reference/compute_adjusted_rand_index.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Hubert's and Arabie's Adjusted Rand index — compute_adjusted_rand_index","text":"Lawrence Hubert Phipps Arabie (1985). \"Comparing partitions\". Journal Classification. 2 (1): 193–218. DOI:10.1007/BF01908075","code":""},{"path":"https://scmethods.github.io/scregclust/reference/compute_rand_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Rand index — compute_rand_index","title":"Compute the Rand index — compute_rand_index","text":"Compute Rand index","code":""},{"path":"https://scmethods.github.io/scregclust/reference/compute_rand_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Rand index — compute_rand_index","text":"","code":"compute_rand_index(k1, k2)"},{"path":"https://scmethods.github.io/scregclust/reference/compute_rand_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Rand index — compute_rand_index","text":"k1 First clustering vector integers k2 Second clustering vector integers","code":""},{"path":"https://scmethods.github.io/scregclust/reference/compute_rand_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Rand index — compute_rand_index","text":"Rand index numeric value","code":""},{"path":"https://scmethods.github.io/scregclust/reference/compute_rand_index.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Rand index — compute_rand_index","text":"W. M. Rand (1971). \"Objective criteria evaluation clustering methods\". Journal American Statistical Association 66 (336): 846–850. DOI:10.2307/2284239","code":""},{"path":"https://scmethods.github.io/scregclust/reference/coop_lasso.html","id":null,"dir":"Reference","previous_headings":"","what":"ADMM algorithm for solving the group-penalized least squares problem — coop_lasso","title":"ADMM algorithm for solving the group-penalized least squares problem — coop_lasso","text":"Implements estimation coop-lasso problem.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/coop_lasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ADMM algorithm for solving the group-penalized least squares problem — coop_lasso","text":"","code":"coop_lasso(   y,   x,   lambda,   weights,   beta_0 = NULL,   rho_0 = 0.2,   alpha_0 = 1.5,   n_update = 2L,   eps_corr = 0.2,   max_iter = 1000L,   eps_rel = 1e-08,   eps_abs = 1e-12,   verbose = FALSE )"},{"path":"https://scmethods.github.io/scregclust/reference/coop_lasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ADMM algorithm for solving the group-penalized least squares problem — coop_lasso","text":"y Target (n x m) x Design matrix (n x p) lambda Penalization parameter weights specific weight group (typically sqrt(group size)). beta_0 Initial value coefficients, allowing warm start. Can set NULL, results initial beta zero matrix. rho_0 Initial ADMM step-size alpha_0 Initial ADMM relaxation parameter n_update Number steps -updates step-size/adaptation parameters eps_corr Lower bound correlation step-size update steps max_iter Maximum number iterations eps_rel Relative tolerance convergence check eps_abs Absolute tolerance convergence check verbose Whether information optimization process printed terminal","code":""},{"path":"https://scmethods.github.io/scregclust/reference/coop_lasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ADMM algorithm for solving the group-penalized least squares problem — coop_lasso","text":"list containing beta coefficients convergence iterations Number iterations","code":""},{"path":"https://scmethods.github.io/scregclust/reference/coop_lasso.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ADMM algorithm for solving the group-penalized least squares problem — coop_lasso","text":"Xu et al. (2017) Adaptive relaxed ADMM: Convergence theory practical implementation. DOI 10.1109/CVPR.2017.765","code":""},{"path":"https://scmethods.github.io/scregclust/reference/count_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Format count table nicely — count_table","title":"Format count table nicely — count_table","text":"Format count table nicely","code":""},{"path":"https://scmethods.github.io/scregclust/reference/count_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format count table nicely — count_table","text":"","code":"count_table(counts, title, row_names, col_width = 5)"},{"path":"https://scmethods.github.io/scregclust/reference/count_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format count table nicely — count_table","text":"counts list count vectors 1 + n_cl entries . NA values replaced - title title table row_names vector row names, one count vector col_width minimum width columns","code":""},{"path":"https://scmethods.github.io/scregclust/reference/count_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format count table nicely — count_table","text":"string formatted table","code":""},{"path":"https://scmethods.github.io/scregclust/reference/fast_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast computation of correlation — fast_cor","title":"Fast computation of correlation — fast_cor","text":"uses memory-intensive much faster algorithm built-cor function.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/fast_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast computation of correlation — fast_cor","text":"","code":"fast_cor(x, y)"},{"path":"https://scmethods.github.io/scregclust/reference/fast_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast computation of correlation — fast_cor","text":"x first input matrix y second input matrix","code":""},{"path":"https://scmethods.github.io/scregclust/reference/fast_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast computation of correlation — fast_cor","text":"Correlations matrix columns x y","code":""},{"path":"https://scmethods.github.io/scregclust/reference/fast_cor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast computation of correlation — fast_cor","text":"Computes correlation columns x y.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/find_module_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine module sizes — find_module_sizes","title":"Determine module sizes — find_module_sizes","text":"Determine module sizes","code":""},{"path":"https://scmethods.github.io/scregclust/reference/find_module_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine module sizes — find_module_sizes","text":"","code":"find_module_sizes(module, n_modules)"},{"path":"https://scmethods.github.io/scregclust/reference/find_module_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine module sizes — find_module_sizes","text":"module Vector module indices n_modules Total number modules","code":""},{"path":"https://scmethods.github.io/scregclust/reference/find_module_sizes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine module sizes — find_module_sizes","text":"named vector containing name module (index \"Noise\") number elements module","code":""},{"path":"https://scmethods.github.io/scregclust/reference/get_avg_num_regulators.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the average number of active regulators per module — get_avg_num_regulators","title":"Get the average number of active regulators per module — get_avg_num_regulators","text":"Get average number active regulators per module","code":""},{"path":"https://scmethods.github.io/scregclust/reference/get_avg_num_regulators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the average number of active regulators per module — get_avg_num_regulators","text":"","code":"get_avg_num_regulators(fit)"},{"path":"https://scmethods.github.io/scregclust/reference/get_avg_num_regulators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the average number of active regulators per module — get_avg_num_regulators","text":"fit object class scRegClust","code":""},{"path":"https://scmethods.github.io/scregclust/reference/get_avg_num_regulators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the average number of active regulators per module — get_avg_num_regulators","text":"data.frame containing average number active regulators per module penalization parameter.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/get_num_final_configs.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the number of final configurations — get_num_final_configs","title":"Return the number of final configurations — get_num_final_configs","text":"Returns number final configurations per penalization parameter scRegClust object.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/get_num_final_configs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the number of final configurations — get_num_final_configs","text":"","code":"get_num_final_configs(fit)"},{"path":"https://scmethods.github.io/scregclust/reference/get_num_final_configs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the number of final configurations — get_num_final_configs","text":"fit object class scRegClust","code":""},{"path":"https://scmethods.github.io/scregclust/reference/get_num_final_configs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the number of final configurations — get_num_final_configs","text":"integer vector containing number final configurations penalization parameter.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/get_rand_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Rand indices — get_rand_indices","title":"Compute Rand indices — get_rand_indices","text":"Compute Rand indices fitted scregclust object","code":""},{"path":"https://scmethods.github.io/scregclust/reference/get_rand_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Rand indices — get_rand_indices","text":"","code":"get_rand_indices(fit, groundtruth, adjusted = TRUE)"},{"path":"https://scmethods.github.io/scregclust/reference/get_rand_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Rand indices — get_rand_indices","text":"fit object class scregclust groundtruth known clustering target genes (integer vector) adjusted TRUE, Adjusted Rand index computed. Otherwise ordinary Rand index computed.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/get_rand_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Rand indices — get_rand_indices","text":"data.frame containing Rand indices. Since can one final configuration penalization parameters, Rand indices averaged fixed penalization parameter. Returned mean, standard deviation number final configurations averaged.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/get_rand_indices.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Rand indices — get_rand_indices","text":"W. M. Rand (1971). \"Objective criteria evaluation clustering methods\". Journal American Statistical Association 66 (336): 846–850. DOI:10.2307/2284239 Lawrence Hubert Phipps Arabie (1985). \"Comparing partitions\". Journal Classification. 2 (1): 193–218. DOI:10.1007/BF01908075","code":""},{"path":"https://scmethods.github.io/scregclust/reference/get_regulator_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Return list of regulator genes — get_regulator_list","title":"Return list of regulator genes — get_regulator_list","text":"Return list regulator genes","code":""},{"path":"https://scmethods.github.io/scregclust/reference/get_regulator_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return list of regulator genes — get_regulator_list","text":"","code":"get_regulator_list(mode = c(\"TF\", \"kinase\"))"},{"path":"https://scmethods.github.io/scregclust/reference/get_regulator_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return list of regulator genes — get_regulator_list","text":"mode Determines genes considered regulators. Currently supports TF=transcription factors kinases.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/get_regulator_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return list of regulator genes — get_regulator_list","text":"list gene symbols","code":""},{"path":[]},{"path":"https://scmethods.github.io/scregclust/reference/get_target_gene_modules.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract target gene modules for given penalization parameters — get_target_gene_modules","title":"Extract target gene modules for given penalization parameters — get_target_gene_modules","text":"Extract target gene modules given penalization parameters","code":""},{"path":"https://scmethods.github.io/scregclust/reference/get_target_gene_modules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract target gene modules for given penalization parameters — get_target_gene_modules","text":"","code":"get_target_gene_modules(fit, penalization = NULL)"},{"path":"https://scmethods.github.io/scregclust/reference/get_target_gene_modules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract target gene modules for given penalization parameters — get_target_gene_modules","text":"fit object class scregclust penalization numeric vector penalization parameters. penalization parameters specified must used used fitting fit object.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/get_target_gene_modules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract target gene modules for given penalization parameters — get_target_gene_modules","text":"list lists final target modules. One list parameter penalization. lists contain modules target genes final configuration.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/jaccard_indicator.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute indicator matrix of pairwise distances smaller than threshold — jaccard_indicator","title":"Compute indicator matrix of pairwise distances smaller than threshold — jaccard_indicator","text":"Computes Jaccard distance rows matrix returns sparse symmetric indicator matrix containing entries distance less given upper bound. Note diagonal always 1.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/jaccard_indicator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute indicator matrix of pairwise distances smaller than threshold — jaccard_indicator","text":"","code":"jaccard_indicator(x, upper_bnd = 0.8)"},{"path":"https://scmethods.github.io/scregclust/reference/jaccard_indicator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute indicator matrix of pairwise distances smaller than threshold — jaccard_indicator","text":"x input matrix vectors compared rows. upper_bnd pairs Jaccard distance upper bound returned 1 others receive entry 0.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/jaccard_indicator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute indicator matrix of pairwise distances smaller than threshold — jaccard_indicator","text":"list vectors describing sparse lower triangular pattern matrix Row indices j Column indices","code":""},{"path":"https://scmethods.github.io/scregclust/reference/jaccard_indicator_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform the computations for thresholded Jaccard distance — jaccard_indicator_comp","title":"Perform the computations for thresholded Jaccard distance — jaccard_indicator_comp","text":"Perform computations thresholded Jaccard distance","code":""},{"path":"https://scmethods.github.io/scregclust/reference/jaccard_indicator_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform the computations for thresholded Jaccard distance — jaccard_indicator_comp","text":"","code":"jaccard_indicator_comp(gs, eps)"},{"path":"https://scmethods.github.io/scregclust/reference/jaccard_indicator_comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform the computations for thresholded Jaccard distance — jaccard_indicator_comp","text":"gs list integer vectors, one row, giving column indices non-zero elements row NULL whole row empty. eps upper bound Jaccard distance (1 - eps becomes lower bound Jaccard similarity)","code":""},{"path":"https://scmethods.github.io/scregclust/reference/jaccard_indicator_comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform the computations for thresholded Jaccard distance — jaccard_indicator_comp","text":"list row column indices #row x #row indicator matrix specifying rows original matrix distance eps.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/jaccard_indicator_comp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform the computations for thresholded Jaccard distance — jaccard_indicator_comp","text":"function optimized sparse matrices computes pairwise Jaccard distances rows input matrix. Note actual distance saved. Instead, threshold (eps) supplied indicator matrix returned, one indicating distance smaller eps (equivalently, Jaccard similarity larger 1 - eps).","code":""},{"path":"https://scmethods.github.io/scregclust/reference/kmeanspp.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform the k-means++ algorithm — kmeanspp","title":"Perform the k-means++ algorithm — kmeanspp","text":"Performs k-means++ algorithm cluster rows input matrix.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/kmeanspp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform the k-means++ algorithm — kmeanspp","text":"","code":"kmeanspp(x, n_cluster, n_init_clusterings = 10L, n_max_iter = 10L)"},{"path":"https://scmethods.github.io/scregclust/reference/kmeanspp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform the k-means++ algorithm — kmeanspp","text":"x Input matrix (n x p) n_cluster Number clusters n_init_clusterings Number repeated random initializations perform n_max_iter Number maximum iterations perform k-means algorithm","code":""},{"path":"https://scmethods.github.io/scregclust/reference/kmeanspp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform the k-means++ algorithm — kmeanspp","text":"object class stats::kmeans.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/kmeanspp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform the k-means++ algorithm — kmeanspp","text":"Estimation repeated","code":""},{"path":"https://scmethods.github.io/scregclust/reference/kmeanspp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform the k-means++ algorithm — kmeanspp","text":"David Arthur Sergei Vassilvitskii. K-Means++: advantages careful seeding. Proceedings Eighteenth Annual ACM-SIAM Symposium Discrete Algorithms, SODA '07, pages 1027––1035. Society Industrial Applied Mathematics, 2007.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/kmeanspp_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine initial centers for the kmeans++ algorithm — kmeanspp_init","title":"Determine initial centers for the kmeans++ algorithm — kmeanspp_init","text":"Determine initial centers kmeans++ algorithm","code":""},{"path":"https://scmethods.github.io/scregclust/reference/kmeanspp_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine initial centers for the kmeans++ algorithm — kmeanspp_init","text":"","code":"kmeanspp_init(n_cluster, x = NULL, dm = NULL)"},{"path":"https://scmethods.github.io/scregclust/reference/kmeanspp_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine initial centers for the kmeans++ algorithm — kmeanspp_init","text":"x data matrix clustered dm distance matrix (rows x; class \"dist\")","code":""},{"path":"https://scmethods.github.io/scregclust/reference/kmeanspp_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine initial centers for the kmeans++ algorithm — kmeanspp_init","text":"Row indices initial cluster centers x","code":""},{"path":"https://scmethods.github.io/scregclust/reference/plot_module_count_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot average silhouette scores and average predictive \\(R^2\\) — plot_module_count_helper","title":"Plot average silhouette scores and average predictive \\(R^2\\) — plot_module_count_helper","text":"Plot average silhouette scores average predictive \\(R^2\\)","code":""},{"path":"https://scmethods.github.io/scregclust/reference/plot_module_count_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot average silhouette scores and average predictive \\(R^2\\) — plot_module_count_helper","text":"","code":"plot_module_count_helper(list_of_fits, penalization)"},{"path":"https://scmethods.github.io/scregclust/reference/plot_module_count_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot average silhouette scores and average predictive \\(R^2\\) — plot_module_count_helper","text":"list_of_fits list scregclust objects fit dataset across variety module counts (varying n_modules running scregclust). penalization Either single numeric value requesting results penalty parameter across fits list_of_fits, one individual fit.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/plot_module_count_helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot average silhouette scores and average predictive \\(R^2\\) — plot_module_count_helper","text":"ggplot2 plot showing average silhouette score average predictive \\(R^2\\)","code":""},{"path":"https://scmethods.github.io/scregclust/reference/plot_regulator_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting the regulatory table from scregclust as a directed graph — plot_regulator_network","title":"Plotting the regulatory table from scregclust as a directed graph — plot_regulator_network","text":"Plotting regulatory table scregclust directed graph","code":""},{"path":"https://scmethods.github.io/scregclust/reference/plot_regulator_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting the regulatory table from scregclust as a directed graph — plot_regulator_network","text":"","code":"plot_regulator_network(   output,   arrow_size = 0.3,   edge_scaling = 30,   no_links = 6,   col = c(\"gray80\", \"#FC7165\", \"#BD828C\", \"#9D8A9F\", \"#7D92B2\", \"#BDA88C\", \"#FCBD65\",     \"#F2BB90\", \"#E7B9BA\", \"#BDB69C\", \"#92B27D\", \"#9B8BA5\", \"#9D7DB2\", \"#94A5BF\") )"},{"path":"https://scmethods.github.io/scregclust/reference/plot_regulator_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting the regulatory table from scregclust as a directed graph — plot_regulator_network","text":"output Object type scregclust_output fit scregclust algorithm. arrow_size Size arrow head edge_scaling Scaling factor edge width no_links Threshold value (0-10) number edges show, higher value = stringent threshold = less edges col color","code":""},{"path":"https://scmethods.github.io/scregclust/reference/plot_regulator_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting the regulatory table from scregclust as a directed graph — plot_regulator_network","text":"Graph gene modules regulators nodes","code":""},{"path":"https://scmethods.github.io/scregclust/reference/plot_silhouettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot individual silhouette scores — plot_silhouettes","title":"Plot individual silhouette scores — plot_silhouettes","text":"Plot individual silhouette scores","code":""},{"path":"https://scmethods.github.io/scregclust/reference/plot_silhouettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot individual silhouette scores — plot_silhouettes","text":"","code":"plot_silhouettes(list_of_fits, penalization, final_config = 1L)"},{"path":"https://scmethods.github.io/scregclust/reference/plot_silhouettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot individual silhouette scores — plot_silhouettes","text":"list_of_fits list scregclust objects fit dataset across variety module counts (varying n_modules running scregclust). penalization Either single numeric value requesting results penalty parameter across fits list_of_fits, one individual fit. final_config final configuration visualized. Either single number used fits list_of_fits, one individual fit.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/plot_silhouettes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot individual silhouette scores — plot_silhouettes","text":"ggplot2 plot showing silhouette scores supplied fit.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/progstr.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick'n'dirty progress bar — progstr","title":"Quick'n'dirty progress bar — progstr","text":"Creates progress bar returns string.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/progstr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick'n'dirty progress bar — progstr","text":"","code":"progstr(step, n_steps, name, finished = FALSE, progress_length = 20L)"},{"path":"https://scmethods.github.io/scregclust/reference/progstr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick'n'dirty progress bar — progstr","text":"step current step worked n_steps total number steps name name process finished whether process finished progress_length length progress bar ascii signs","code":""},{"path":"https://scmethods.github.io/scregclust/reference/progstr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick'n'dirty progress bar — progstr","text":"string formatted progress bar","code":""},{"path":"https://scmethods.github.io/scregclust/reference/remove_empty_modules.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove empty modules — remove_empty_modules","title":"Remove empty modules — remove_empty_modules","text":"Remove empty modules","code":""},{"path":"https://scmethods.github.io/scregclust/reference/remove_empty_modules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove empty modules — remove_empty_modules","text":"","code":"remove_empty_modules(module)"},{"path":"https://scmethods.github.io/scregclust/reference/remove_empty_modules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove empty modules — remove_empty_modules","text":"module Vector module indices","code":""},{"path":"https://scmethods.github.io/scregclust/reference/remove_empty_modules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove empty modules — remove_empty_modules","text":"updated vector module indices empty modules removed.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/remove_empty_modules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove empty modules — remove_empty_modules","text":"iterates modules positive index, leaving noise module untouched.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/reset_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset input 3d-array by filling matrix along first dimension — reset_array","title":"Reset input 3d-array by filling matrix along first dimension — reset_array","text":"Reset input 3d-array filling matrix along first dimension","code":""},{"path":"https://scmethods.github.io/scregclust/reference/reset_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset input 3d-array by filling matrix along first dimension — reset_array","text":"","code":"reset_array(arr, input)"},{"path":"https://scmethods.github.io/scregclust/reference/reset_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset input 3d-array by filling matrix along first dimension — reset_array","text":"arr 3d-array dimension n_cl x n_obs x n_genes input matrix size n_obs x n_genes","code":""},{"path":"https://scmethods.github.io/scregclust/reference/scregclust-package.html","id":null,"dir":"Reference","previous_headings":"","what":"scregclust: Reconstructing the Regulatory Programs of Target Genes in scRNA-Seq Data — scregclust-package","title":"scregclust: Reconstructing the Regulatory Programs of Target Genes in scRNA-Seq Data — scregclust-package","text":"Implementation scregclust algorithm described Larsson, Held, et al. (2024) doi:10.1038/s41467-024-53954-3  reconstructs regulatory programs target genes scRNA-seq data. Target genes clustered modules module associated linear model describing regulatory program.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/scregclust-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"scregclust: Reconstructing the Regulatory Programs of Target Genes in scRNA-Seq Data — scregclust-package","text":"Computational methods scregclust algorithm","code":""},{"path":[]},{"path":"https://scmethods.github.io/scregclust/reference/scregclust-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"scregclust: Reconstructing the Regulatory Programs of Target Genes in scRNA-Seq Data — scregclust-package","text":"Ida Larsson, Felix Held, Sven Nelander","code":""},{"path":"https://scmethods.github.io/scregclust/reference/scregclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncover gene modules and their regulatory programs from single-cell data — scregclust","title":"Uncover gene modules and their regulatory programs from single-cell data — scregclust","text":"Use scRegClust algorithm determine gene modules regulatory programs single-cell data.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/scregclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncover gene modules and their regulatory programs from single-cell data — scregclust","text":"","code":"scregclust(   expression,   genesymbols,   is_regulator,   penalization,   n_modules,   initial_target_modules = NULL,   sample_assignment = NULL,   center = TRUE,   split1_proportion = 0.5,   total_proportion = 1,   split_indices = NULL,   prior_indicator = NULL,   prior_genesymbols = NULL,   prior_baseline = 1e-06,   prior_weight = 0.5,   min_module_size = 0L,   allocate_per_obs = TRUE,   noise_threshold = 0.025,   n_cycles = 50L,   use_kmeanspp_init = TRUE,   n_initializations = 50L,   max_optim_iter = 10000L,   tol_coop_rel = 1e-08,   tol_coop_abs = 1e-12,   tol_nnls = 1e-04,   compute_predictive_r2 = TRUE,   compute_silhouette = FALSE,   nowarnings = FALSE,   verbose = TRUE,   quick_mode = FALSE,   quick_mode_percent = 0.1 )"},{"path":"https://scmethods.github.io/scregclust/reference/scregclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncover gene modules and their regulatory programs from single-cell data — scregclust","text":"expression p x n matrix pre-processed single cell expression data p rows genes n columns cells. genesymbols vector gene names corresponding rows expression. length p. is_regulator indicator vector 1 indicates corresponding row expression candidate regulator. rows represent target genes. length p. penalization Sparsity penalty related amount regulators associated module. Either single positive number vector positive numbers. n_modules Requested number modules (integer). provided without specifying initial_target_modules, initial module allocation performed cross-correlation matrix targets genes first dataset data splitting. initial_target_modules initial assignment target genes modules length sum(is_regulator == 0L). specified, see n_modules regarding module initialization. provided, use_kmeanspp_init n_initializations ignored. sample_assignment vector sample assignment cell, can used perform data splitting stratification. length n. stratification NULL supplied. center Whether genes centered within subgroup defined sample_assignment. split1_proportion proportion use first dataset data splitting. proportion second dataset 1 - split1_proportion. stratification sample_assignment used, proportion strata controlled. total_proportion Can used use proportion supplied observations. proportion first dataset data splitting relation full dataset total_proportion * split1_proportion. split_indices Can used provide explicit data split. supplied split1_proportion, total_proportion ignored. Note sample_assigment provided center == TRUE, subgroup centering performed case random splitting. vector length n containing entries 1 cells first data split, 2 cells second data split NA cells excluded computations. prior_indicator indicator matrix (sparse dense) size q x q indicates whether known functional relationship two genes. Ideally, supplied sparse matrix (sparseMatrix Matrix package). , matrix converted one. prior_genesymbols vector gene names length q corresponding rows/columns prior_indicator. genesymbols, useful overlap. prior_baseline positive baseline network prior. larger parameter , less impact network prior . prior_weight number 0 1 indicating strength prior relation data. 0 ignores prior makes algorithm completely data-driven. 1 uses prior module allocation. min_module_size Minimum required size target genes module. Smaller modules emptied. allocate_per_obs Whether module allocation performed observation second data split separately. FALSE, target genes allocated modules aggregate sum squares across observations second data split. noise_threshold Threshold best \\(R^2\\) target gene gets identified noise. n_cycles Number maximum algorithmic cycles. use_kmeanspp_init Use kmeans++ module initialization initial_target_modules single integer; otherwise use kmeans random initial cluster centers n_initializations Number kmeans(++) initialization runs. max_optim_iter Maximum number iterations optimization coop-Lasso NNLS steps. tol_coop_rel Relative convergence tolerance optimization coop-Lasso step. tol_coop_abs Absolute convergence tolerance optimization coop-Lasso step. tol_nnls Convergence tolerance optimization NNLS step. compute_predictive_r2 Whether compute predictive \\(R^2\\) per module well regulator importance. compute_silhouette Whether compute silhouette scores target gene. nowarnings turned warning messages shown. verbose Whether print progress. quick_mode Whether use reduced number noise targets speed computations. quick_mode_percent number [0, 1) indicating amount noise targets use re-allocation process quick_mode = TRUE.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/scregclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uncover gene modules and their regulatory programs from single-cell data — scregclust","text":"list S3 class scregclust containing penalization supplied penalization parameters results list result lists (S3 class scregclust_result), one supplied penalization parameter. See . initial_target_modules Initial allocation target genes modules. split_indices either verbatim vector given input vector encoding splits NA = included, 1 = split 1 2 = split 2. Allows reproducibility data splits. supplied penalization parameter, results contains list current penalization parameter, supplied genesymbols filtering (used fitting), supplied is_regulator vector filtering (used fitting), number fitted modules n_modules, whether current run converged single configuration (boolean), well output object containing numeric results final configuration. possible algorithm ends finite cycle configurations instead unique final configuration. Therefore, output list element list following contents: reg_table regulator table, matrix weights regulator module module vector length genesymbols containing module assignments genes regulators marked NA. Genes considered noise marked -1. module_all module, however, genes marked noise (-1 module) assigned module largest \\(R^2\\), even noise_threshold. r2 matrix predictive \\(R^2\\) value target gene module best_r2 vector best predictive \\(R^2\\) gene (regulators marked NA) best_r2_idx module index corresponding best predictive \\(R^2\\) gene (regulators marked NA) r2_module vector predictive \\(R^2\\) values module (included compute_predictive_r2 == TRUE) importance matrix importance values regulator (rows) module (columns) (included compute_predictive_r2 == TRUE) r2_cross_module_per_target matrix cross module \\(R^2\\) values target gene (rows) module (columns) (included compute_silhouette == TRUE) silhouette vector silhouette scores target gene (included compute_silhouette == TRUE) models regulator selection module matrix regulators rows modules columns signs regulator signs module matrix regulators rows modules columns weights average regulator coefficient module coeffs list regulator coefficient matrices module target genes re-estimated NNLS step sigmas matrix residual variances, one per target gene module; derived residuals NNLS step","code":""},{"path":"https://scmethods.github.io/scregclust/reference/scregclust_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Package data before clustering — scregclust_format","title":"Package data before clustering — scregclust_format","text":"Package data clustering","code":""},{"path":"https://scmethods.github.io/scregclust/reference/scregclust_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package data before clustering — scregclust_format","text":"","code":"scregclust_format(expression_matrix, mode = c(\"TF\", \"kinase\"))"},{"path":"https://scmethods.github.io/scregclust/reference/scregclust_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package data before clustering — scregclust_format","text":"expression_matrix p x n gene expression matrix gene symbols rownames. mode Determines genes considered regulators.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/scregclust_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Package data before clustering — scregclust_format","text":"list genesymbols gene symbols extracted expression matrix sample_assignment vector filled 1's length columns gene expression matrix. is_regulator Whether gene considered regulator , determined dependent mode.","code":""},{"path":[]},{"path":"https://scmethods.github.io/scregclust/reference/split_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Sample — split_sample","title":"Split Sample — split_sample","text":"Splits sample train test set","code":""},{"path":"https://scmethods.github.io/scregclust/reference/split_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Sample — split_sample","text":"","code":"split_sample(   z,   stratification,   is_regulator,   split_indices,   split1_proportion,   total_proportion,   center )"},{"path":"https://scmethods.github.io/scregclust/reference/split_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Sample — split_sample","text":"z matrix single cell data rows genes columns cells. stratification vector sampling stratified length ncol(z) is_regulator indicator vector, telling rows z candidate regulators split_indices vector given split indices. can NULL split1_proportion proportion include first data split total_proportion proportion data include overall splitting center TRUE data row-centered. Set FALSE otherwise.","code":""},{"path":"https://scmethods.github.io/scregclust/reference/split_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Sample — split_sample","text":"list containing z1_reg first data split, TF-part z2_reg second data split, TF-part z1_target first data split, non-TF part z2_target second data split, non-TF part split_indices either verbatim vector given input vector encoding splits NA = included, 1 = split 1 2 = split 2. Allows reproducibility data splits.","code":""},{"path":"https://scmethods.github.io/scregclust/news/index.html","id":"scregclust-022","dir":"Changelog","previous_headings":"","what":"scregclust 0.2.2","title":"scregclust 0.2.2","text":"Vignettes relied heavily downloading data. Make vignettes articles appear website actual package, since expected anybody profiting vignettes active internet connection anyways.","code":""},{"path":"https://scmethods.github.io/scregclust/news/index.html","id":"scregclust-021","dir":"Changelog","previous_headings":"","what":"scregclust 0.2.1","title":"scregclust 0.2.1","text":"CRAN release: 2025-07-24 Added vignette illustrating supply regulator list","code":""},{"path":"https://scmethods.github.io/scregclust/news/index.html","id":"scregclust-020-1","dir":"Changelog","previous_headings":"","what":"scregclust 0.2.0-1","title":"scregclust 0.2.0-1","text":"Regulator importance computed unnecessarily one regulator. single regulator always important regulator cluster.","code":""},{"path":"https://scmethods.github.io/scregclust/news/index.html","id":"scregclust-020","dir":"Changelog","previous_headings":"","what":"scregclust 0.2.0","title":"scregclust 0.2.0","text":"CRAN release: 2024-12-06","code":""},{"path":"https://scmethods.github.io/scregclust/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"scregclust 0.2.0","text":"Quick Mode: Instead trying re-allocate target genes allocated noise cluster, certain (random) percentage target genes attempted re-allocated. quick_mode = TRUE supplied argument scregclust activate feature (default) percentage noise target genes re-allocate given quick_mode_percent, number [0, 1).","code":""},{"path":"https://scmethods.github.io/scregclust/news/index.html","id":"minor-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"scregclust 0.2.0","text":"Added CRAN install instructions README","code":""},{"path":"https://scmethods.github.io/scregclust/news/index.html","id":"scregclust-010","dir":"Changelog","previous_headings":"","what":"scregclust 0.1.0","title":"scregclust 0.1.0","text":"First release CRAN","code":""}]
